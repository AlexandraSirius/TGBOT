from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters
)

from sqlalchemy.orm import Session
from dating_bot.database.models import Profile, User, Like
from dating_bot.database import crud
from dating_bot.database.session import SessionLocal

AGE, GENDER, CITY, CONTACT = range(4)

# –ú–µ–Ω—é
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/anketa")],
        [KeyboardButton("/edit"), KeyboardButton("/search")],
        [KeyboardButton("/myprofile"), KeyboardButton("/liked")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=markup)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    existing = db.query(Profile).filter(Profile.user_id == user.id).first()
    db.close()

    if existing:
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞. –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ /edit üòâ")
        return ConversationHandler.END

    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    profile = db.query(Profile).filter(Profile.user_id == user.id).first()
    db.close()

    if not profile:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ù–∞–ø–∏—à–∏ /anketa, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ—ë.")
        return ConversationHandler.END

    context.user_data["edit"] = True
    await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É!\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = int(update.message.text)
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª:", reply_markup=reply_markup)
    return GENDER

async def profile_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    return CITY

async def profile_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏ —Å–≤–æ–π Telegram @username")
    return CONTACT

async def profile_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    user_id = update.effective_user.id

    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, user_id)

    if context.user_data.get("edit"):
        db.query(Like).filter(
            (Like.from_user_id == user.id) | (Like.to_user_id == user.id)
        ).delete()
        db.query(Profile).filter(Profile.user_id == user.id).delete()
        db.commit()

    profile = Profile(
        user_id=user.id,
        age=context.user_data["age"],
        gender=context.user_data["gender"],
        city=context.user_data["city"],
        contact=context.user_data["contact"]
    )
    db.add(profile)
    db.commit()

    message = "–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üîÅ" if context.user_data.get("edit") else "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üî•"
    await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())

    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/anketa")],
        [KeyboardButton("/edit"), KeyboardButton("/search")],
        [KeyboardButton("/myprofile"), KeyboardButton("/liked")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=markup)

    db.close()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–ª–∞–π–∫/–ø—Ä–æ–ø—É—Å–∫)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã
async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    profile = db.query(Profile).filter(Profile.user_id == user.id).first()
    db.close()

    if not profile:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ù–∞–ø–∏—à–∏ /anketa, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ—ë.")
        return

    text = (
        f"–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n"
        f"–ü–æ–ª: {profile.gender}\n"
        f"–ì–æ—Ä–æ–¥: {profile.city}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {profile.contact}"
    )
    await update.message.reply_text(text)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∞–Ω–∫–µ—Ç
async def liked_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)

    likes = db.query(Like).filter(
        Like.from_user_id == user.id,
        Like.is_like == "like"
    ).all()

    if not likes:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∞–Ω–∫–µ—Ç.")
        db.close()
        return

    response = "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–Ω–∫–µ—Ç—ã:\n\n"
    shown_ids = set()
    for like in likes:
        if like.to_user_id in shown_ids:
            continue
        shown_ids.add(like.to_user_id)

        profile = db.query(Profile).filter(Profile.user_id == like.to_user_id).first()
        target_user = db.query(User).filter(User.id == like.to_user_id).first()
        if profile and target_user:
            response += (
                f"üë§ {target_user.first_name or target_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}, –ü–æ–ª: {profile.gender}, –ì–æ—Ä–æ–¥: {profile.city}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: {profile.contact}\n\n"
            )

    db.close()
    await update.message.reply_text(response)

# –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    current_user = crud.get_user_by_telegram_id(db, update.effective_user.id)

    profile = (
        db.query(Profile)
        .filter(Profile.user_id != current_user.id)
        .first()
    )

    if not profile:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç üòû –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        db.close()
        return

    user = db.query(User).filter(User.id == profile.user_id).first()
    text = (
        f"üë§ {user.first_name or user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n"
        f"–ü–æ–ª: {profile.gender}\n"
        f"–ì–æ—Ä–æ–¥: {profile.city}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {profile.contact}"
    )
    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like:{profile.user_id}"),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip:{profile.user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)
    db.close()