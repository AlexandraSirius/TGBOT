from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters
)
from sqlalchemy.orm import Session
from dating_bot.database.models import Profile, User, Like
from dating_bot.database import crud
from dating_bot.database.session import SessionLocal

AGE, GENDER, CITY, NICKNAME = range(4)

# –ú–µ–Ω—é
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/anketa")],
        [KeyboardButton("/edit"), KeyboardButton("/search")],
        [KeyboardButton("/myprofile"), KeyboardButton("/liked")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=markup)

# –ê–Ω–∫–µ—Ç–∞
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    existing = db.query(Profile).filter(Profile.user_id == user.id).first()
    db.close()
    if existing:
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞. –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ /edit üòâ")
        return ConversationHandler.END
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    profile = db.query(Profile).filter(Profile.user_id == user.id).first()
    db.close()
    if not profile:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ù–∞–ø–∏—à–∏ /anketa, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ—ë.")
        return ConversationHandler.END
    context.user_data["edit"] = True
    await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É!\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = int(update.message.text)
    markup = ReplyKeyboardMarkup(
        [[KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text("–£–∫–∞–∂–∏ –ø–æ–ª:", reply_markup=markup)
    return GENDER

async def profile_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    return CITY

async def profile_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Telegram-–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    return NICKNAME

async def profile_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nickname"] = update.message.text
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    existing = db.query(Profile).filter(Profile.user_id == user.id).first()

    if context.user_data.get("edit") and existing:
        existing.age = context.user_data["age"]
        existing.gender = context.user_data["gender"]
        existing.city = context.user_data["city"]
        existing.contact = context.user_data["nickname"]
        db.commit()
        msg = "–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üîÅ"
    else:
        profile = Profile(
            user_id=user.id,
            age=context.user_data["age"],
            gender=context.user_data["gender"],
            city=context.user_data["city"],
            contact=context.user_data["nickname"]
        )
        db.add(profile)
        db.commit()
        msg = "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üî•"

    db.close()
    await update.message.reply_text(msg)

    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/anketa")],
        [KeyboardButton("/edit"), KeyboardButton("/search")],
        [KeyboardButton("/myprofile"), KeyboardButton("/liked")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=markup)

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–ª–∞–π–∫/–ø—Ä–æ–ø—É—Å–∫)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, target_id = query.data.split(":")
    db = SessionLocal()
    from_user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    to_user = db.query(User).filter(User.id == int(target_id)).first()

    existing_like = db.query(Like).filter_by(
        from_user_id=from_user.id,
        to_user_id=int(target_id)
    ).first()

    if not existing_like:
        db.add(Like(
            from_user_id=from_user.id,
            to_user_id=int(target_id),
            is_like=action
        ))
        db.commit()

        mutual = db.query(Like).filter_by(
            from_user_id=int(target_id),
            to_user_id=from_user.id,
            is_like="like"
        ).first()

        if action == "like" and mutual:
            try:
                await context.bot.send_message(
                    chat_id=int(to_user.telegram_id),
                    text=f"üíò –£ –≤–∞—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å @{from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}!"
                )
                await context.bot.send_message(
                    chat_id=int(from_user.telegram_id),
                    text=f"üíò –£ –≤–∞—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å @{to_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}!"
                )
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ç—Ç—á–∞]: {e}")

    db.close()
    await query.edit_message_text("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    current_user = crud.get_user_by_telegram_id(db, update.effective_user.id)

    if not current_user:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start —Å–Ω–∞—á–∞–ª–∞.")
        db.close()
        return

    my_profile = db.query(Profile).filter(Profile.user_id == current_user.id).first()
    if not my_profile:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /anketa üòâ")
        db.close()
        return

    profile = db.query(Profile).filter(Profile.user_id != current_user.id).first()
    if not profile:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç üòû")
        db.close()
        return

    target = db.query(User).filter(User.id == profile.user_id).first()
    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like:{profile.user_id}"),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip:{profile.user_id}")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    text = (
        f"–ò–º—è: {target.first_name or target.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"–ù–∏–∫: {profile.contact}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n"
        f"–ü–æ–ª: {profile.gender}\n"
        f"–ì–æ—Ä–æ–¥: {profile.city}"
    )
    await update.message.reply_text(text, reply_markup=markup)
    db.close()

# –ö–æ–º–∞–Ω–¥–∞ /myprofile
async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    profile = db.query(Profile).filter(Profile.user_id == user.id).first()
    db.close()
    if not profile:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")
        return
    text = (
        f"–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n"
        f"–ü–æ–ª: {profile.gender}\n"
        f"–ì–æ—Ä–æ–¥: {profile.city}\n"
        f"–ù–∏–∫: {profile.contact}"
    )
    await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /liked
async def liked_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    user = crud.get_user_by_telegram_id(db, update.effective_user.id)
    likes = db.query(Like).filter_by(from_user_id=user.id, is_like="like").all()
    if not likes:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∞–Ω–∫–µ—Ç.")
        db.close()
        return
    response = "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∞–Ω–∫–µ—Ç—ã:\n\n"
    for like in likes:
        profile = db.query(Profile).filter(Profile.user_id == like.to_user_id).first()
        target_user = db.query(User).filter(User.id == like.to_user_id).first()
        if profile and target_user:
            response += (
                f"üë§ {target_user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                f"–ù–∏–∫: {profile.contact}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {profile.age}, –ü–æ–ª: {profile.gender}, –ì–æ—Ä–æ–¥: {profile.city}\n\n"
            )
    db.close()
    await update.message.reply_text(response)
